spawn input/filtergen/t/scan

set timeout 3

set test "c-style comment"

send "/* blah */word\r"

expect { 
    "kind = slash" { fail $test }
    "kind = identifier, spelling = \"word\"" { pass $test }
    timeout { fail $test }
    eof { fail "$test (eof)" }
}

set test "shell-style hash comment"

send "\# blah\rword\r"

expect {
    "kind = UNRECOGNISED" { fail $test }
    "kind = identifier, spelling = \"word\"" { pass $test }
    timeout { fail $test }
    eof { fail $test }
}

set test "line ending with a hash comment"

send "word\#blah\rword\r"
expect {
    "kind = identifier, spelling = \"word\#\"" { fail $test }
    "kind = identifier, spelling = \"word\"" {
        expect {
            "kind = UNRECOGNISED" { fail $test }
            "kind = identifier, spelling = \"word\"" { pass $test }
            timeout { fail $test }
            eof { fail "$test (eof)" }
        }
    }
    timeout { fail $test }
    eof { fail "$test (eof)" }
}

set test "nested end comment"

send "/* c comments can't nest */ ***/\r"

expect {
    "kind = UNRECOGNISED" {
        expect {
            "kind = UNRECOGNISED" {
                expect {
                    "kind = UNRECOGNISED" {
                        expect {
                            "kind = slash" { pass $test }
                            timeout { fail $test }
                            eof { fail "$test (eof)" }
                        }
                    }
                    timeout { fail $test }
                    eof { fail "$test (eof)" }
                }
            }
            timeout { fail $test }
            eof { fail "$test (eof)" }
        }
    }
    timeout { fail $test }
    eof { fail "$test (eof)" }
}

set test "nested start comment"

send "/* this /* is okay */word\r"

expect {
    "kind = identifier, spelling = \"word\"" { pass $test }
    timeout { fail $test }
    eof { fail "$test (eof)" }
}
